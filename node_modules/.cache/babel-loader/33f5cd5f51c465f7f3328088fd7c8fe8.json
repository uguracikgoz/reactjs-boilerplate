{"ast":null,"code":"import _objectSpread from \"/home/ugur/Desktop/sam-boilerplate/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/ugur/Desktop/sam-boilerplate/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ugur/Desktop/sam-boilerplate/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport decode from 'jwt-decode';\n\nvar AuthEngine =\n/*#__PURE__*/\nfunction () {\n  // Initializing important variables\n  function AuthEngine(domain) {\n    _classCallCheck(this, AuthEngine);\n\n    this.domain = domain || 'http://localhost:8080'; // RESTAPI server domain\n\n    this.fetch = this.fetch.bind(this); // React binding stuff\n\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthEngine, [{\n    key: \"login\",\n    value: function login(username, password) {\n      var _this = this;\n\n      // Get a token from api server using the fetch api\n      return this.fetch(\"\".concat(this.domain, \"/login\"), {\n        method: 'POST',\n        body: JSON.stringify({\n          username: username,\n          password: password\n        })\n      }).then(function (res) {\n        _this.setToken(res.token); // Setting the token in localStorage\n\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken(); // GEtting token from localstorage\n\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired. N\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      // Using jwt-decode npm package to decode the token\n      return decode(this.getToken());\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json' // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n      };\n\n      if (this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }]);\n\n  return AuthEngine;\n}();\n\nexport { AuthEngine as default };","map":{"version":3,"sources":["/home/ugur/Desktop/sam-boilerplate/src/AuthEngine.js"],"names":["decode","AuthEngine","domain","fetch","bind","login","getProfile","username","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","getToken","isTokenExpired","decoded","exp","Date","now","err","idToken","localStorage","setItem","getItem","removeItem","url","options","headers","loggedIn","_checkStatus","response","json","status","error","Error","statusText"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,YAAnB;;IACqBC,U;;;AAEjB;AACA,sBAAYC,MAAZ,EACA;AAAA;;AACI,SAAKA,MAAL,GAAcA,MAAM,IAAI,uBAAxB,CADJ,CACoD;;AAChD,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb,CAFJ,CAEuC;;AACnC,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;;;0BAEKG,Q,EAAUC,Q,EAChB;AAAA;;AACI;AACA,aAAO,KAAKL,KAAL,WAAc,KAAKD,MAAnB,aACP;AACIO,QAAAA,MAAM,EAAE,MADZ;AAEIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACN;AACIL,UAAAA,QAAQ,EAARA,QADJ;AAEIC,UAAAA,QAAQ,EAARA;AAFJ,SADM;AAFV,OADO,EAQJK,IARI,CAQC,UAAAC,GAAG,EACX;AACI,QAAA,KAAI,CAACC,QAAL,CAAcD,GAAG,CAACE,KAAlB,EADJ,CAC6B;;;AACzB,eAAOC,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAP;AACH,OAZM,CAAP;AAaH;;;+BAGD;AACI;AACA,UAAME,KAAK,GAAG,KAAKG,QAAL,EAAd,CAFJ,CAEkC;;AAC9B,aAAO,CAAC,CAACH,KAAF,IAAW,CAAC,KAAKI,cAAL,CAAoBJ,KAApB,CAAnB,CAHJ,CAGkD;AACjD;;;mCAEcA,K,EACf;AACI,UACA;AACI,YAAMK,OAAO,GAAGrB,MAAM,CAACgB,KAAD,CAAtB;;AACA,YAAIK,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EACA;AAAE;AACE,iBAAO,IAAP;AACH,SAHD,MAKI,OAAO,KAAP;AACP,OATD,CAUA,OAAOC,GAAP,EACA;AACI,eAAO,KAAP;AACH;AACJ;;;6BAEQC,O,EACT;AACI;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACH;;;+BAGD;AACI;AACA,aAAOC,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH;;;6BAGD;AACI;AACAF,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACH;;;iCAGD;AACI;AACA,aAAO9B,MAAM,CAAC,KAAKmB,QAAL,EAAD,CAAb;AACH;;;;;;;;;;;;;gBAEKY,G,EAAKC,O,EACX;AACI;AACA,UAAMC,OAAO,GAAG;AACZ,kBAAU,kBADE;AAEZ,wBAAgB,kBAFJ,CAKhB;AACA;;AANgB,OAAhB;;AAOA,UAAI,KAAKC,QAAL,EAAJ,EACA;AACID,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAY,KAAKd,QAAL,EAAvC;AACH;;AAED,aAAOhB,KAAK,CAAC4B,GAAD;AAERE,QAAAA,OAAO,EAAPA;AAFQ,SAGLD,OAHK,EAAL,CAKFnB,IALE,CAKG,KAAKsB,YALR,EAMFtB,IANE,CAMG,UAAAuB,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OANX,CAAP;AAOH,K;;;iCAEYD,Q,EACb;AACI;AACA,UAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAnB,IAA0BF,QAAQ,CAACE,MAAT,GAAkB,GAAhD,EACA;AAAE;AACE,eAAOF,QAAP;AACH,OAHD,MAKA;AACI,YAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,QAAQ,CAACK,UAAnB,CAAZ;AACAF,QAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AACA,cAAMG,KAAN;AACH;AACJ;;;;;;SAnHgBtC,U","sourcesContent":["import decode from 'jwt-decode';\nexport default class AuthEngine\n{\n    // Initializing important variables\n    constructor(domain)\n    {\n        this.domain = domain || 'http://localhost:8080' // RESTAPI server domain\n        this.fetch = this.fetch.bind(this) // React binding stuff\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    login(username, password)\n    {\n        // Get a token from api server using the fetch api\n        return this.fetch(`${this.domain}/login`,\n        {\n            method: 'POST',\n            body: JSON.stringify(\n            {\n                username,\n                password\n            })\n        }).then(res =>\n        {\n            this.setToken(res.token) // Setting the token in localStorage\n            return Promise.resolve(res);\n        })\n    }\n\n    loggedIn() \n    {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken() // GEtting token from localstorage\n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) \n    {\n        try\n        {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000)\n            { // Checking if token is expired. N\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err)\n        {\n            return false;\n        }\n    }\n\n    setToken(idToken)\n    {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken)\n    }\n\n    getToken()\n    {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout()\n    {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n    getProfile()\n    {\n        // Using jwt-decode npm package to decode the token\n        return decode(this.getToken());\n    }\n\n    fetch(url, options)\n    {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn())\n        {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url,\n        {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus(response)\n    {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300)\n        { // Success status lies between 200 to 300\n            return response\n        }\n        else\n        {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}